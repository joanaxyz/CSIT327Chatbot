// this class serves as a manager for storing or retrieving files from/to our
// application models through JSON (carries our data)

// JSON stands for JavaScript Object Notation - a text format for storing and exchanging data.
// Looks a lot like a JS object:
// {
//      question: "question1",
//      answer: "answer1",
//      category: "category1"
// }

// CSRF stands for Cross-Site Request Forgery - an attack where a malicious website tricks your
// browser into making a request to another website where you're logged in. 
// The attacker can perform actions without you consent, like changing you credentials 
// or making a purchase, or submitting a form.
// Websites like Django require a CSRF token for POST/PUT/DELETE requests to protect the client.
// A CSRF token is a random value generated by the server and stored in your session.
// If the token is missing or wrong, the server rejects the request.

class DataManager{
    // a pq object mut be passed on to this argument (attributes include: question, answer, category)
    @csrf_exempt
    postRequest(url, data) {
        // starting a network request with fetch()
        // This method is a modern JS way to make HTTP requests (messagge a client sends to a server)
        // Example: opening a url in your browser sends a GET request, submitting a form sends a POST request
        // In this block of code, the method is POST so we are sending data to the server
        // the fetch function may take 1 or 2 parameters, first parameter is the url you want to request
        // the second parameter is an object where you can specify method, headers, body, and mode
        // {method: 'data' headers: 'data' body: 'data'} is an example of a JS object literal, a shortcut for creating a class without defining a class
        return fetch(url, {
            method: 'POST', // methods include: get, post, put, patch, delete, head, options
            headers: {
                'Content-Type': 'application/json', // tells the server that we, the client is sending JSON data
                'X-CSRFToken': this.getCSRFToken(), 
                // includes Django's CSRF token so the POST request is allowed
                // this.getCSRFToken(): a function that grabs the CSRF token from cookies (the method after this)
            },
            body: JSON.stringify(data) // converts our object (pqData) into a string that the server can understand

        })
        // .then() is a method that runs the function passed as the parameter once the server repleis
        .then(response => response.json()); // response.json() just parses the server's response from JSON into a JS object, specifically an instance of a promise since fetch is asynch
    }

    // To summarize, here's what happens in this method.
    // The fetch function sends pqData to the server as JSON. Since we are using the url: 'add_pqs',
    // that means our add_pq view will be called, because its corresponding url was requested. 
    // Thus, the adding of the pq to the model is executed.
    // The server returns a JSON response


    
    getCSRFToken() {
        let cookieValue = null;
        const name = 'csrftoken';
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let cookie of cookies) {
                cookie = cookie.trim();
                if (cookie.startsWith(name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    getRequest(url) {
        return fetch(url, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            console.log("Fetched Data:", data);
            return data; // âœ… return the actual data
        })
        .catch(error => {
            console.error('ManagerError:', error);
            return []; // return empty list if error
        });
    }

}
